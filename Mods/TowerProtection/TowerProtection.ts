import { broadcastMessage, createGameMessageWithNoSound } from "library/common/messages";
import { createPoint, createHordeColor, createResourcesAmount } from "library/common/primitives";
import { isReplayMode } from "library/game-logic/game-tools";
import { UnitDirection, UnitHurtType } from "library/game-logic/horde-types";
import HordePluginBase from "plugins/base-plugin";
import { GameState, GlobalVars, PeopleIncomeLevelT, ReplaceUnitParameters } from "./GlobalData";
import { AttackPlansClass } from "./Realizations/AttackPlans";
import { Player_TOWER_CHOISE_DIFFICULT, Player_TOWER_CHOISE_ATTACKPLAN, PlayerTowersClass } from "./Realizations/Player_units";
import { RectangleRingSpawner } from "./Realizations/Spawners";
import { TeimurUnitsClass, TeimurLegendaryUnitsClass } from "./Realizations/Teimur_units";
import { Cell, Rectangle } from "./Types/Geometry";
import { ITeimurUnit } from "./Types/ITeimurUnit";
import { IUnit } from "./Types/IUnit";
import { Team } from "./Types/Team";
import { spawnUnit } from "./Utils";
import { Buff_AddShield, Buff_Improvements, Buff_PeriodAttack_Arrow, Buff_PeriodAttack_Arrow_2, Buff_PeriodAttack_Catapult, Buff_PeriodAttack_Ikon, Buff_PeriodHealing, Buff_PeriodIncomeGold, BuffsClass } from "./Realizations/Buffs";
import { IBuff } from "./Types/IBuff";
import { printObjectItems } from "library/common/introspection";


// –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–¥–µ–ª–∞—Ç—å –±–∞—Ñ—Ñ —Å—Ç–µ–Ω–∞, –æ–Ω–∞ —É–±–∏–≤–∞–µ—Ç –≤—Å–µ—Ö —é–Ω–∏—Ç–æ–≤ –≤–æ–∫—Ä—É–≥ –±–∞—à–Ω–∏ –∏ —Å—Ç–∞–≤–∏—Ç —Ç—É–¥–∞ –∑–∞–±–æ—Ä

// –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞ —Å–ø–∞–≤–Ω –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤, —á–µ–º –≤—ã—à–µ –ø—Ä–æ–∫–∞—á–∞–Ω–æ, —Ç–µ–º –∏—Ö –±–æ–ª—å—à–µ, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∞–ø–ø —Å—Ç–∞—Ç–æ–≤, –∏–ª–∏, –∫ –ø—Ä–∏–º–µ—Ä—É, –ø–æ—Å–ª–µ 5 –∏–ª–∏ 10 —É—Ä–æ–≤–Ω—è –∫–∞–∂–¥—ã–π –∞–ø–ø - +1 –∑–∞—â–∏—Ç–∫–∏–∫
// –ø—Ä–æ—Å—Ç–æ —ç—Ç–æ–≥–æ –æ–¥–Ω–æ–≥–æ –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –±—ã—Å—Ç—Ä–æ —Å–Ω–æ—Å—è—Ç, –∞ —Ç–∞–∫ –±—É–¥–µ—Ç —Ç–æ–ª–∫ –∏–¥—Ç–∏ –≤ –≤–µ—Ç–∫—É –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤, —Ç–µ–º –±–æ–ª–µ–µ, –µ—Å–ª–∏ –æ–Ω–∏ —Å–∞–º–∏ –µ—â–µ –±—É–¥—É—Ç –∫–∞—á–∞—Ç—å—Å—è, —Ç–æ –æ–Ω–∏ –∑–∞—á–∏—Å—Ç—è—Ç –∫–∞—Ä—Ç—É –æ—Ç —é–Ω–∏—Ç–æ–≤. –º–æ–∂–Ω–æ –≤–æ–æ–±—â–µ —Å–¥–µ–ª–∞—Ç—å –≤–µ—Ç–∫—É —Å—É–º–º–æ–Ω–æ–≤, –≤–æ—Ä–æ–Ω—ã —Ç–∞–º –≥–æ–ª—É–±–∏, –Ω–æ –∫–æ–Ω–µ—á–Ω–æ –Ω–∞–¥–æ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–∞ —ç—Ç–æ –ø–æ—Ç—è–Ω–µ—Ç

// –∫—Ç–æ-—Ç–æ –º–æ–≥ –∑–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ –±–∞—à–Ω–∏, –ø–æ—ç—Ç–æ–º—É –ø—ã—Ç–∞—Ç—å—Å—è –∑–∞—Å–ø–∞–≤–Ω–∏—Ç—å –µ—â–µ
// –∏–≥—Ä–æ–∫ –≤—ã—à–µ–ª, –∞ —Ä–µ—Å—Ç–∞—Ä—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
// –≤–º–µ—Å—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –ø–æ–±–µ–¥—ã –ø–∏—Å–∞—Ç—å 3 –º–∞–∫—Å –±–∞—Ñ—Ñ–∞ 

// - –ø–∏—Å–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –∫–∞–¥—Ä–æ–≤ –ø—Ä–æ–¥–µ—Ä–∂–∞–ª—Å—è
// –±–∞—Ñ—Ñ - –∑–∞—â–∏—Ç–∞ —Ä–∞–∑ –≤ —Å–∫–æ–ª—å–∫–æ-—Ç–æ —Å–µ–∫

//üìå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 2: –Ω—É–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—É–Ω–¥–∞. –í–µ—Å—å –∞–∑–∞—Ä—Ç —Ä–µ–∂–∏–º–∞ –≤ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏, –∞ –∫–æ–Ω—Ü–æ–≤–∫–∞ –ª–∞–≥—É—á–∞—è –∏ —Å–∫—É—á–Ω–∞—è. –ü—Ä–æ–¥–µ—Ä–∂–∞–ª—Å—è 75–∫ —Ç–∞–∫—Ç–æ–≤ - –º–æ–ª–æ–¥–µ—Ü, —Ñ–ª–∞–≥ —Ç–µ–±–µ –≤ —Ä—É–∫–∏. –ù–µ –º—É—á–∞–π –Ω–∏ —Å–µ–±—è, –Ω–∏ –∫–æ–º
//üìå –∏–¥–µ—è: –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∞–ø–≥—Ä–µ–π–¥–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å
// —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ–±—ã –≤ –∫–æ–Ω—Ü–µ –∏–≥—Ä—ã –≤—ã–≤–æ–¥–∏–ª–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–≥—Ä–æ–∫–∞

// –ø–æ—á–µ–º—É-—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –ª–æ–º–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –æ–ø—ã—Ç–∞!!

export class TowerProtection extends HordePluginBase {
    hostPlayerTeamNum : number;

    // —Ç–∞–π–º–µ—Ä—ã
    timers: Array<number>;
    // –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    notifiedTeamNumber: number;

    public constructor() {
        super("–ë–∞—à–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞");

        GlobalVars.SetGameState(GameState.PreInit);
    }

    public onFirstRun() {
    }

    public onEveryTick(gameTickNum: number) {
        GlobalVars.gameTickNum = gameTickNum;

        switch (GlobalVars.GetGameState()) {
            case GameState.PreInit:
                this.PreInit(gameTickNum);
                break;
            case GameState.Init:
                this.Init(gameTickNum);
                break;
            case GameState.ChoiseDifficult:
                this.ChoiseDifficult(gameTickNum);
                break;
            case GameState.ChoiseWave:
                this.ChoiseWave(gameTickNum);
                break;
            case GameState.Run:
                this.Run(gameTickNum);
                break;
            case GameState.End:
                this.End(gameTickNum);
                break;
        }
    }

    private PreInit(gameTickNum: number) {
        this.hostPlayerTeamNum     = -1;
        this.notifiedTeamNumber    = -1;

        GlobalVars.units           = new Array<IUnit>();
        GlobalVars.buffs           = new Array<IBuff>();

        GlobalVars.gameStateChangedTickNum = 0;
        GlobalVars.ScriptUtils     = ScriptUtils;
        GlobalVars.ActiveScena     = ActiveScena;
        GlobalVars.HordeContentApi = HordeContentApi;
        GlobalVars.HordeEngine     = HordeEngine;
        GlobalVars.Players         = Players;
        GlobalVars.scenaWidth      = GlobalVars.ActiveScena.GetRealScena().Size.Width;
        GlobalVars.scenaHeight     = GlobalVars.ActiveScena.GetRealScena().Size.Height;
        GlobalVars.unitsMap        = GlobalVars.ActiveScena.GetRealScena().UnitsMap;
        GlobalVars.configs         = new Array<any>();
        GlobalVars.HCL             = HCL;

        // –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∫–∞
        this.timers = new Array<number>(20);
        for (var i = 0; i < 20; i++) {
            this.timers[i] = 0;
        }

        // –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        GlobalVars.SetGameState(GameState.Init);

        // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞ –∫–∞—Ä—Ç–∞
        var scenaName = GlobalVars.ActiveScena.GetRealScena().ScenaName;
        if (scenaName == "–ë–∞—à–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç") {
            GlobalVars.teams = new Array<Team>(6);
            for (var i = 0; i < 2; i++) {
                for (var j = 0; j < 3; j++) {
                    const teamNum = 3*i + j;
                    const shiftX  = 6*8*j;
                    const shiftY  = 6*8*i;
                    this.log.info("i = ", i, " j = ", j, " teamNum = ", teamNum, " shiftX = ", shiftX, " shiftY = ", shiftY);
                    GlobalVars.teams[teamNum]                    = new Team();
                    GlobalVars.teams[teamNum].teimurSettlementId = 6;
                    GlobalVars.teams[teamNum].towerCell          = new Cell(shiftX + 23, shiftY + 23);
                    GlobalVars.teams[teamNum].settlementIdx      = teamNum;
                    GlobalVars.teams[teamNum].spawner            = new RectangleRingSpawner(
                        new Rectangle(shiftX + 2, shiftY + 2, 44, 44),
                        new Rectangle(shiftX + 8, shiftY + 8, 32, 32),
                        teamNum
                    );
                }
            }
        } else {
            GlobalVars.SetGameState(GameState.End);
        }
    }

    private Init(gameTickNum: number) {
        GlobalVars.rnd = GlobalVars.ActiveScena.GetRealScena().Context.Randomizer;
        
        //////////////////////////////////////////
        // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö
        //////////////////////////////////////////

        for (var teamNum = 0; teamNum < GlobalVars.teams.length; teamNum++) {
            GlobalVars.teams[teamNum].incomeGold   = 0;
            GlobalVars.teams[teamNum].incomeMetal  = 0;
            GlobalVars.teams[teamNum].incomeLumber = 0;
            GlobalVars.teams[teamNum].incomePeople = 0;
            GlobalVars.teams[teamNum].nickname     = "";
            GlobalVars.teams[teamNum].settlement       = GlobalVars.ActiveScena.GetRealScena().Settlements.GetByUid('' + GlobalVars.teams[teamNum].settlementIdx);
            GlobalVars.teams[teamNum].teimurSettlement = GlobalVars.ActiveScena.GetRealScena().Settlements.GetByUid('' + GlobalVars.teams[teamNum].teimurSettlementId);
            GlobalVars.teams[teamNum].color            = GlobalVars.teams[teamNum].settlement.SettlementColor;
        }

        for (var player of GlobalVars.Players) {
            var realPlayer   = player.GetRealPlayer();
            var settlement   = realPlayer.GetRealSettlement();
            var settlementId = settlement.Uid;

            this.log.info("player of settlementId ", settlementId);

            if (GlobalVars.teams.find((team) => { return team.teimurSettlementId == settlementId;}) ||
                (isReplayMode() && !realPlayer.IsReplay)) {
                continue;
            }
            
            // –∏—â–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∫–æ—Ç–æ—Ä–æ–π –¥–∞–Ω–Ω–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ
            var teamNum = -1;
            for (var _teamNum = 0; _teamNum < GlobalVars.teams.length; _teamNum++) {
                if (GlobalVars.teams[_teamNum].settlementIdx == settlementId) {
                    teamNum = _teamNum;
                    break;
                }
            }
            this.log.info("\t found team ", teamNum);
            if (teamNum == -1) {
                continue;
            }

            GlobalVars.teams[teamNum].inGame = true;
            if (GlobalVars.teams[teamNum].nickname.length > 0) {
                GlobalVars.teams[teamNum].nickname += ","
            }
            GlobalVars.teams[teamNum].nickname += realPlayer.Nickname;

            // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Ö–æ—Å—Ç–∞ (–æ–Ω —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫)
            if (this.hostPlayerTeamNum == -1) {
                this.hostPlayerTeamNum = teamNum;
            }

            // —É–±–∏—Ä–∞–µ–º –Ω–∞–ª–æ–≥–∏
            var censusModel = GlobalVars.ScriptUtils.GetValue(settlement.Census, "Model");
            // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥ —Å–±–æ—Ä–∞ –Ω–∞–ª–æ–≥–æ–≤ –∏ –≤—ã–ø–ª–∞—Ç—ã –∂–∞–ª–æ–≤–∞–Ω–∏—è (—á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–±–æ—Ä, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 0)
            censusModel.TaxAndSalaryUpdatePeriod = 0;

            // –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–∏—Ä–æ—Å—Ç –Ω–∞—Å–µ–ª–µ–Ω–∏—è
            censusModel.PeopleIncomeLevels.Clear();
            censusModel.PeopleIncomeLevels.Add(new PeopleIncomeLevelT(0, 0, -1));
            censusModel.LastPeopleIncomeLevel = 0;
        }

        // –≤—ã—á–∏—Å–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å

        GlobalVars.difficult = 1;
        this.log.info("current difficult = ", GlobalVars.difficult);

        //////////////////////////////////////////
        // —Å—Ç–∞–≤–∏–º –Ω–∞—á–∞–ª—å–Ω—É—é –±–∞—à–Ω—é –¥–ª—è —Ö–æ—Å—Ç–∞
        //////////////////////////////////////////

        Player_TOWER_CHOISE_DIFFICULT.InitConfig();

        for (var teamNum = 0; teamNum < GlobalVars.teams.length; teamNum++) {
            if (!GlobalVars.teams[teamNum].inGame) {
                continue;
            }

            this.log.info("teamNum = ", teamNum, " nickName = ", GlobalVars.teams[teamNum].nickname);

            var towerUnit = GlobalVars.unitsMap.GetUpperUnit(GlobalVars.teams[teamNum].towerCell.X, GlobalVars.teams[teamNum].towerCell.Y);
            if (towerUnit) {
                GlobalVars.teams[teamNum].tower = new IUnit(towerUnit, teamNum);
            } else {
                GlobalVars.teams[teamNum].tower = new IUnit(spawnUnit(
                    GlobalVars.teams[teamNum].settlement,
                    GlobalVars.HordeContentApi.GetUnitConfig(Player_TOWER_CHOISE_DIFFICULT.BaseCfgUid),
                    UnitDirection.Down,
                    createPoint(GlobalVars.teams[teamNum].towerCell.X, GlobalVars.teams[teamNum].towerCell.Y)
                ), teamNum);
            }
        }

        //////////////////////////////////////////
        // —Ä–∞–∑–º–µ—â–∞–µ–º –∑–∞–º–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        //////////////////////////////////////////

        let replaceParams                 = new ReplaceUnitParameters();
        replaceParams.OldUnit             = GlobalVars.teams[this.hostPlayerTeamNum].tower.unit;
        replaceParams.NewUnitConfig       = GlobalVars.configs[Player_TOWER_CHOISE_DIFFICULT.CfgUid];
        replaceParams.Cell                = null;  // –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –∫–ª–µ—Ç–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã–π —é–Ω–∏—Ç. –ï—Å–ª–∏ null, —Ç–æ —Ü–µ–Ω—Ç—Ä —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ —é–Ω–∏—Ç–∞ —Å–æ–≤–ø–∞–¥–µ—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º
        replaceParams.PreserveHealthLevel = false; // –ù—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–¥–æ—Ä–æ–≤—å—è? (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏)
        replaceParams.PreserveOrders      = false; // –ù—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∏–∫–∞–∑—ã?
        replaceParams.Silent              = true;  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –≤ –ª–æ–≥ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫ (–ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏)
        GlobalVars.teams[this.hostPlayerTeamNum].tower = new Player_TOWER_CHOISE_DIFFICULT(GlobalVars.teams[this.hostPlayerTeamNum].tower.unit.Owner.Units.ReplaceUnit(replaceParams), this.hostPlayerTeamNum);

        // –æ—Ç–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–µ–Ω—å–≥–∏

        for (var teamNum = 0; teamNum < GlobalVars.teams.length; teamNum++) {
            if (!GlobalVars.teams[teamNum].inGame) {
                continue;
            }

            GlobalVars.teams[teamNum].settlement.Resources.TakeResources(GlobalVars.teams[teamNum].settlement.Resources.GetCopy());
        }

        GlobalVars.SetGameState(GameState.ChoiseDifficult);
    }

    private ChoiseDifficult(gameTickNum: number) {
        // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å

        // –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        if (!GlobalVars.teams[this.hostPlayerTeamNum].tower.unit.OrdersMind.ActiveOrder.ProductUnitConfig) {
            return;
        }

        // –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        GlobalVars.difficult = parseInt(GlobalVars.teams[this.hostPlayerTeamNum].tower.unit.OrdersMind.ActiveOrder.ProductUnitConfig.Shield);
        this.log.info("selected difficult = ", GlobalVars.difficult);
        broadcastMessage("–ë—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å " + GlobalVars.difficult, createHordeColor(255, 140, 140, 140));

        // –∑–∞–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–π –∑–∞–º–æ–∫ –Ω–∞ –∑–∞–º–æ–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–ª–Ω—ã
        Player_TOWER_CHOISE_ATTACKPLAN.InitConfig();

        let replaceParams = new ReplaceUnitParameters();
        this.log.info("this.hostPlayerTeamNum = ", this.hostPlayerTeamNum);
        replaceParams.OldUnit = GlobalVars.teams[this.hostPlayerTeamNum].tower.unit;
        replaceParams.NewUnitConfig = GlobalVars.configs[Player_TOWER_CHOISE_ATTACKPLAN.CfgUid];
        replaceParams.Cell = null;                   // –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –∫–ª–µ—Ç–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã–π —é–Ω–∏—Ç. –ï—Å–ª–∏ null, —Ç–æ —Ü–µ–Ω—Ç—Ä —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ —é–Ω–∏—Ç–∞ —Å–æ–≤–ø–∞–¥–µ—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º
        replaceParams.PreserveHealthLevel = false;   // –ù—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–¥–æ—Ä–æ–≤—å—è? (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏)
        replaceParams.PreserveOrders = false;        // –ù—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∏–∫–∞–∑—ã?
        replaceParams.Silent = true;                 // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –≤ –ª–æ–≥ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫ (–ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏)
        GlobalVars.teams[this.hostPlayerTeamNum].tower = new Player_TOWER_CHOISE_ATTACKPLAN(GlobalVars.teams[this.hostPlayerTeamNum].tower.unit.Owner.Units.ReplaceUnit(replaceParams), this.hostPlayerTeamNum);

        // –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        GlobalVars.SetGameState(GameState.ChoiseWave);
    }

    private ChoiseWave(gameTickNum: number) {
        var FPS = GlobalVars.HordeEngine.HordeResurrection.Engine.Logic.Battle.BattleController.GameTimer.CurrentFpsLimit;

        //////////////////////////////////////////
        // –≤—ã–±–æ—Ä –≤–æ–ª–Ω—ã
        //////////////////////////////////////////

        var choisedAttackPlanIdx = -1;

        // –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –ª–∏ –≤–æ–ª–Ω–∞
        if (!GlobalVars.teams[this.hostPlayerTeamNum].tower.unit.OrdersMind.ActiveOrder.ProductUnitConfig) {
            return;
        }

        // –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≤–æ–ª–Ω–∞
        choisedAttackPlanIdx = parseInt(GlobalVars.teams[this.hostPlayerTeamNum].tower.unit.OrdersMind.ActiveOrder.ProductUnitConfig.Shield);

        // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –ø–ª–∞–Ω –∞—Ç–∞–∫–∏
        if (choisedAttackPlanIdx == -1) {
            return;
        }

        //////////////////////////////////////////
        // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        //////////////////////////////////////////

        // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–∏–∫ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        GlobalVars.gameStateChangedTickNum = gameTickNum;
        GlobalVars.SetGameState(GameState.Run);

        // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥–∏

        var allUnitsClass = [
            ...TeimurUnitsClass,
            ...TeimurLegendaryUnitsClass,
            ...PlayerTowersClass
        ];
        for (var i = 0; i < allUnitsClass.length; i++) {
            allUnitsClass[i].InitConfig();
        }

        for (var i = 0; i < BuffsClass.length; i++) {
            BuffsClass[i].InitConfig();
        }

        // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω –∞—Ç–∞–∫–∏

        GlobalVars.attackPlan = new AttackPlansClass[choisedAttackPlanIdx]();
        broadcastMessage("–ë—ã–ª –≤—ã–±—Ä–∞–Ω –ø–ª–∞–Ω –∞—Ç–∞–∫–∏ " + choisedAttackPlanIdx, createHordeColor(255, 140, 140, 140));
        broadcastMessage(AttackPlansClass[choisedAttackPlanIdx].Description, createHordeColor(255, 140, 140, 140));
        {
            var secondsLeft = Math.round(GlobalVars.attackPlan.waves[0].gameTickNum) / FPS;
            var minutesLeft = Math.floor(secondsLeft / 60);
            secondsLeft    -= minutesLeft * 60;
            secondsLeft     = Math.round(secondsLeft);
            broadcastMessage("–î–æ –Ω–∞—á–∞–ª–∞ –≤–æ–ª–Ω—ã " + (minutesLeft > 0 ? minutesLeft + " –º–∏–Ω—É—Ç " : "") + secondsLeft + " —Å–µ–∫—É–Ω–¥", createHordeColor(255, 255, 50, 10));
        }

        // —Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –≤—Ä–∞–≥–æ–≤

        var unitsTotalCount = GlobalVars.attackPlan.GetUnitsCount();
        for (var unitCfg in unitsTotalCount) {
            this.log.info(unitCfg, " ", unitsTotalCount[unitCfg]);
        }

        for (var teamNum = 0; teamNum < GlobalVars.teams.length; teamNum++) {
            if (!GlobalVars.teams[teamNum].inGame) {
                continue;
            }

            let replaceParams                 = new ReplaceUnitParameters();
            replaceParams.OldUnit             = GlobalVars.teams[teamNum].tower.unit;
            replaceParams.NewUnitConfig       = GlobalVars.configs[PlayerTowersClass[teamNum].CfgUid];
            replaceParams.Cell                = null;  // –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –∫–ª–µ—Ç–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã–π —é–Ω–∏—Ç. –ï—Å–ª–∏ null, —Ç–æ —Ü–µ–Ω—Ç—Ä —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ —é–Ω–∏—Ç–∞ —Å–æ–≤–ø–∞–¥–µ—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º
            replaceParams.PreserveHealthLevel = false; // –ù—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–¥–æ—Ä–æ–≤—å—è? (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏)
            replaceParams.PreserveOrders      = false; // –ù—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∏–∫–∞–∑—ã?
            replaceParams.Silent              = true;  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –≤ –ª–æ–≥ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫ (–ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏)
            GlobalVars.teams[teamNum].tower   = new PlayerTowersClass[teamNum](GlobalVars.teams[teamNum].tower.unit.Owner.Units.ReplaceUnit(replaceParams), teamNum);
            GlobalVars.units.push(GlobalVars.teams[teamNum].tower);
            GlobalVars.buffs.push(new Buff_Improvements(teamNum));
            GlobalVars.buffs.push(new Buff_PeriodIncomeGold(teamNum));
            GlobalVars.buffs.push(new Buff_PeriodIncomeGold(teamNum));
            GlobalVars.buffs.push(new Buff_PeriodIncomeGold(teamNum));
            GlobalVars.buffs.push(new Buff_PeriodIncomeGold(teamNum));
            GlobalVars.buffs.push(new Buff_PeriodIncomeGold(teamNum));
            GlobalVars.buffs.push(new Buff_PeriodHealing(teamNum));
            GlobalVars.teams[teamNum].incomeGold = 1000;
        }

        // –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –æ –∑–∞–º–µ–Ω–µ —é–Ω–∏—Ç–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ LevelSystem)

        let scenaSettlements = GlobalVars.ActiveScena.GetRealScena().Settlements;
        for (var settlementNum = 0; settlementNum < scenaSettlements.Count; settlementNum++) {
            var settlementUnits = scenaSettlements.Item.get(settlementNum + '').Units;

            settlementUnits.UnitReplaced.connect(
                function (sender, args) {
                    // –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∑–∞–º–µ–Ω—è —é–Ω–∏—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤ —Å–ø–∏—Å–∫–µ —é–Ω–∏—Ç–æ–≤, —Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
                    if (!args.OldUnit.ScriptData.ExperienceSystem) {
                        return;
                    }
                    for (var unitNum = 0; unitNum < GlobalVars.units.length; unitNum++) {
                        if (args.OldUnit.Id == GlobalVars.units[unitNum].unit.Id) {
                            GlobalVars.units[unitNum].needDeleted = true;
                            GlobalVars.units.push(GlobalVars.units[unitNum].constructor(args.NewUnit, GlobalVars.units[unitNum].teamNum));

                            // –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ—Ç—É –≤ —Å–∏—Å—Ç–µ–º–µ, —Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
                            if (!GlobalVars.configs[args.NewUnit.Cfg.Uid]) {
                                var prev_BaseCfgUid     = ITeimurUnit.BaseCfgUid;
                                var prev_CfgUid         = ITeimurUnit.CfgUid;
                                ITeimurUnit.BaseCfgUid  = args.NewUnit.Cfg.Uid;
                                ITeimurUnit.CfgUid      = args.NewUnit.Cfg.Uid;
                                ITeimurUnit.InitConfig();
                                ITeimurUnit.BaseCfgUid  = prev_BaseCfgUid;
                                ITeimurUnit.CfgUid      = prev_CfgUid;
                            }
                            break;
                        }
                    }
            });
        }
    }

    private Run(gameTickNum: number) {
        // —Å–º–µ—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–∞–∫—Ç–∞, —á—Ç–æ–±—ã –≤—Ä–µ–º—è —Å—á–∏—Ç–∞–ª–æ—Å—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        gameTickNum -= GlobalVars.gameStateChangedTickNum;

        var FPS = GlobalVars.HordeEngine.HordeResurrection.Engine.Logic.Battle.BattleController.GameTimer.CurrentFpsLimit;

        // –ø—Ä–∏—Å—É–∂–¥–∞–µ–º –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –±–∞—à–Ω—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞

        var timerNum = 0;

        // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã –ª–∏

        var time     = new Date().getTime();
        if (GlobalVars.attackPlan.waves.length <= GlobalVars.attackPlan.waveNum) {
            GlobalVars.SetGameState(GameState.End);

            // –∑–∞–º–æ–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –•–ü –ø–æ–±–µ–∂–¥–∞–µ—Ç
            var victory_teamNum = -1;
            var victory_castleHP = 0;
            for (var teamNum = 0; teamNum < GlobalVars.teams.length; teamNum++) {
                if (!GlobalVars.teams[teamNum].inGame ||
                    GlobalVars.teams[teamNum].tower.unit.IsDead) {
                    continue;
                }

                if (victory_teamNum == -1 || (victory_castleHP < GlobalVars.teams[teamNum].tower.unit.Health)) {
                    victory_teamNum  = teamNum;
                    victory_castleHP = GlobalVars.teams[teamNum].tower.unit.Health;
                }
            }
            for (var teamNum = 0; teamNum < GlobalVars.teams.length; teamNum++) {
                if (teamNum == victory_teamNum) {
                    GlobalVars.teams[teamNum].settlement.Existence.ForceVictory();
                } else {
                    GlobalVars.teams[teamNum].settlement.Existence.ForceTotalDefeat();
                }
            }
            return;
        } else if (gameTickNum % 50 == 0) {
            // –ø—Ä–∏—Å—É–∂–¥–∞–µ–º –ø–æ—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–º–æ–∫ —É–Ω–∏—á—Ç–æ–∂–µ–Ω
            for (var teamNum = 0; teamNum < GlobalVars.teams.length; teamNum++) {
                if (!GlobalVars.teams[teamNum].inGame) {
                    continue;
                }

                if (GlobalVars.teams[teamNum].tower.unit.IsDead && GlobalVars.teams[teamNum].tower.unit.ScriptData.DefenceFromTeimur_IsDefeat == undefined) {
                    broadcastMessage(GlobalVars.teams[teamNum].nickname + " –ø—Ä–æ–∏–≥—Ä–∞–ª, –æ–Ω –ø—Ä–æ–¥–µ—Ä–∂–∞–ª—Å—è " + gameTickNum + " —Ç–∞–∫—Ç–æ–≤!", GlobalVars.teams[teamNum].settlement.SettlementColor);
                    GlobalVars.teams[teamNum].tower.unit.ScriptData.DefenceFromTeimur_IsDefeat = true;
                    GlobalVars.teams[teamNum].settlement.Existence.ForceTotalDefeat();

                    // —É–±–∏–≤–∞–µ–º —é–Ω–∏—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∞—Ç–∞–∫–æ–≤–∞–ª–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä–æ–∫–æ–≤

                    for (var unitNum = 0; unitNum < GlobalVars.units.length; unitNum++) {
                        if (GlobalVars.units[unitNum].teamNum == teamNum) {
                            GlobalVars.units[unitNum].unit.BattleMind.InstantDeath(null, UnitHurtType.Mele);
                        }
                    }

                    // —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –±–∞—Ñ—Ñ—ã

                    for (var buffNum = 0; buffNum < GlobalVars.buffs.length; buffNum++) {
                        if (GlobalVars.buffs[buffNum].teamNum == teamNum) {
                            GlobalVars.buffs[buffNum].needDeleted = true;
                        }
                    }
                }
            }

            // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã –ª–∏ –≤—Å–µ –∑–∞–º–∫–∏
            var allCastlesDead = true;
            for (var teamNum = 0; teamNum < GlobalVars.teams.length; teamNum++) {
                if (!GlobalVars.teams[teamNum].inGame) {
                    continue;
                }

                if (!GlobalVars.teams[teamNum].tower.unit.IsDead) {
                    allCastlesDead = false;
                    break;
                }
            }
            if (allCastlesDead) {
                // –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                var str = "[PROFILE]\n";
                for (var i = 0; i < this.timers.length; i++) {
                    if (this.timers[i] == 0) break;
                    str += "timer[" + i + "] = " + this.timers[i] + "\n";
                }
                this.log.info(str);

                GlobalVars.SetGameState(GameState.End);
            }
        }
        this.timers[timerNum++] += new Date().getTime() - time;

        // –æ–ø–æ–≤–µ—â–∞–µ–º —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –∏ –æ –∏–≥—Ä–æ–∫–µ

        if (gameTickNum % (30 * FPS) == 0 && GlobalVars.GetGameState() != GameState.End) {
            this.notifiedTeamNumber++;
            while (!GlobalVars.teams[this.notifiedTeamNumber].inGame  ||
                GlobalVars.teams[this.notifiedTeamNumber].tower.unit.IsDead) {
                this.notifiedTeamNumber = (this.notifiedTeamNumber + 1) % GlobalVars.teams.length;
            }

            // –∏—â–µ–º 3 –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞—Ñ—Ñ–∞
            var sortedBuffsIdx : Array<number> = Array.from(Array(Buff_Improvements.TowersBuffsCount[this.notifiedTeamNumber].length).keys());
            sortedBuffsIdx.sort((a : number, b : number) => {
                return Buff_Improvements.TowersBuffsCount[this.notifiedTeamNumber][b] - Buff_Improvements.TowersBuffsCount[this.notifiedTeamNumber][a];
            });

            var secondsLeft     = Math.round(GlobalVars.attackPlan.waves[GlobalVars.attackPlan.waves.length - 1].gameTickNum - gameTickNum) / FPS;
            var minutesLeft     = Math.floor(secondsLeft / 60);
            secondsLeft        -= minutesLeft * 60;
            secondsLeft         = Math.round(secondsLeft);
            let msgStr : string = "–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è " + (minutesLeft > 0 ? minutesLeft + " –º–∏–Ω—É—Ç " : "") + secondsLeft + " —Å–µ–∫—É–Ω–¥\n";
            msgStr             += "–°–∞–º—ã–µ –º–æ—â–Ω—ã–µ –±–∞—Ñ—Ñ—ã –∏–≥—Ä–æ–∫–∞ " + GlobalVars.teams[this.notifiedTeamNumber].nickname + ":\n";
            for (var i = 0; i < 3; i++) {
                var buffIdx = sortedBuffsIdx[i];
                msgStr += "\t" + GlobalVars.configs[Buff_Improvements.ImprovementsBuffsClass[buffIdx].CfgUid].Name + " : " + Buff_Improvements.TowersBuffsCount[this.notifiedTeamNumber][buffIdx] + "\n"
            }

            var msg = createGameMessageWithNoSound(msgStr, GlobalVars.teams[this.notifiedTeamNumber].color);
            for (var teamNum = 0; teamNum < GlobalVars.teams.length; teamNum++) {
                if (!GlobalVars.teams[teamNum].inGame) {
                    continue;
                }
                GlobalVars.teams[teamNum].settlement.Messages.AddMessage(msg);
            }
        }

        // —Å–ø–∞–≤–Ω–µ—Ä

        time     = new Date().getTime();
        if (gameTickNum % 50 == 1) {
            for (var teamNum = 0; teamNum < GlobalVars.teams.length; teamNum++) {
                if (!GlobalVars.teams[teamNum].inGame ||
                    GlobalVars.teams[teamNum].tower.unit.IsDead) {
                    continue;
                }
                GlobalVars.teams[teamNum].spawner.OnEveryTick(gameTickNum);
            }
        }
        this.timers[timerNum++] += new Date().getTime() - time;

        // –∏–Ω–∫–æ–º

        time     = new Date().getTime();
        if (gameTickNum % 100 == 2) {
            for (var teamNum = 0; teamNum < GlobalVars.teams.length; teamNum++) {
                if (!GlobalVars.teams[teamNum].inGame ||
                    GlobalVars.teams[teamNum].tower.unit.IsDead) {
                    continue;
                }

                // –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –µ—Å—Ç—å –∏–Ω–∫–æ–º
                if (GlobalVars.teams[teamNum].incomeGold   == 0 &&
                    GlobalVars.teams[teamNum].incomeMetal  == 0 &&
                    GlobalVars.teams[teamNum].incomeLumber == 0 &&
                    GlobalVars.teams[teamNum].incomePeople == 0) {
                    continue;
                }

                // –¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
                GlobalVars.teams[teamNum].settlement.Resources.AddResources(
                    createResourcesAmount(
                        GlobalVars.teams[teamNum].incomeGold,
                        GlobalVars.teams[teamNum].incomeMetal,
                        GlobalVars.teams[teamNum].incomeLumber,
                        GlobalVars.teams[teamNum].incomePeople));

                // –∑–∞–Ω—É–ª—è–µ–º —Ä–µ—Å—ã
                GlobalVars.teams[teamNum].incomeGold   = 0;
                GlobalVars.teams[teamNum].incomeMetal  = 0;
                GlobalVars.teams[teamNum].incomeLumber = 0;
                GlobalVars.teams[teamNum].incomePeople = 0;
            }
        }
        this.timers[timerNum++] += new Date().getTime() - time;

        // –æ–±—Ä–∞–±–æ—Ç–∫–∞ —é–Ω–∏—Ç–æ–≤ (65 %)

        time     = new Date().getTime();
        for (var unitNum = 0; unitNum < GlobalVars.units.length; unitNum++) {
            // —é–Ω–∏—Ç —É–º–µ—Ä, —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
            if (GlobalVars.units[unitNum].unit.IsDead) {
                GlobalVars.units[unitNum].OnDead(gameTickNum);
                GlobalVars.units.splice(unitNum--, 1);
            }
            // —é–Ω–∏—Ç —Å–∞–º –∑–∞–ø—Ä–æ—Å–∏–ª, —á—Ç–æ –µ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞
            else if (GlobalVars.units[unitNum].needDeleted) {
                GlobalVars.units.splice(unitNum--, 1);
            }
            // –Ω–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —é–Ω–∏—Ç–∞
            else if (gameTickNum % GlobalVars.units[unitNum].processingTickModule == GlobalVars.units[unitNum].processingTick) {
                GlobalVars.units[unitNum].OnEveryTick(gameTickNum);
            }
        }
        this.timers[timerNum++] += new Date().getTime() - time;

        // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ñ—Ñ–æ–≤ (30 %)

        time     = new Date().getTime();
        for (var buffNum = 0; buffNum < GlobalVars.buffs.length; buffNum++) {
            // –±–∞—Ñ—Ñ —Å–∞–º –∑–∞–ø—Ä–æ—Å–∏–ª, —á—Ç–æ –µ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞
            if (GlobalVars.buffs[buffNum].needDeleted) {
                GlobalVars.buffs[buffNum].OnDead(gameTickNum);
                GlobalVars.buffs.splice(buffNum--, 1);
            }
            // –Ω–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ñ—Ñ
            else if (gameTickNum % GlobalVars.buffs[buffNum].processingTickModule == GlobalVars.buffs[buffNum].processingTick) {
                GlobalVars.buffs[buffNum].OnEveryTick(gameTickNum);
            }
        }
        this.timers[timerNum++] += new Date().getTime() - time;

        // –µ—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∏–≥—Ä–∞, —Ç–æ

        if (GlobalVars.GetGameState() == GameState.End) {
            broadcastMessage("–ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥!", createHordeColor(255, 140, 140, 140));
        }
    }

    private End(gameTickNum: number) {
        if (GlobalVars.gameStateChangedTickNum + 10*50 < gameTickNum) {
            GlobalVars.SetGameState(GameState.PreInit);
            // —Ç—É—Ç –Ω—É–∂–Ω–æ TotalDefead –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
            for (var teamNum = 0; teamNum < GlobalVars.teams.length; teamNum++) {
                if (!GlobalVars.teams[teamNum].inGame) {
                    continue;
                }
                GlobalVars.ScriptUtils.SetValue(GlobalVars.teams[teamNum].settlement.Existence, "Status", GlobalVars.HCL.HordeClassLibrary.World.Settlements.Existence.ExistenceStatus.CombatNow);
            }
        }
    }
}
